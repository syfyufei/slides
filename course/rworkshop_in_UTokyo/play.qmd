---
title: "基础语法"
subtitle: "Play: Input and Output"
runtime: shiny_prerendered
---

<!--
遇到的问题：

- code不规范
  - 代码
  - 包
  - 冒号
- 格式不统一
  - 叶子的部分和沙凡的部分有明显的脱节
  - 研究问题？
  - 示例数据？
  - 书的结构

- 导语，不编序号
- 知识点，用.callout放在每章最前边
-->

```{r setup, include=FALSE}
chooseCRANmirror(graphics = FALSE, ind = 1)
knitr::opts_chunk$set(echo = TRUE,
                      message = FALSE,
                      warning = FALSE,
                      out.width="100%")

if (!require(pacman)) install.packages("pacman")

p_load(
  lubridate,
  here,
  rio,
  tidyverse,
  drhur
)
```


<!-- https://appsilon.com/oop-in-r-with-r6/ -->
<!-- https://matloff.wordpress.com/2022/07/25/comments-on-the-new-r-oop-system-r7/ -->

本章就像游戏中的新手村一样，是你熟悉游戏按键（基础操作）和游戏界面（游戏按键）的地方。
在这里，你会逐渐熟悉R语言的基础操作，了解R语言的基本语法，为之后的学习（打怪升级）打下基础。

:::{.callout-tip}
## 本章知识点

本书中命令输入行以上面带有颜色的标识语句进行展示，比如上面蓝色的`1 + 2`。
电子版读者可以直接将鼠标移至命令行最右端，点击复制符号&#x1F4CB;，将整行语句复制到剪切板，然后在自己计算机上进行练习。

而获得的结果则以中括号+输出行为标志展示，如果一行则为`[1] <输出内容>`, 比如上面在蓝色`1 + 2`下面出现的`[1] 3`。
不难猜到，`[ ]`中不仅可以是`1`，还可以是更多的数字。
假如你要输出的结果是一串很长的结果，在规定了每行多少个数字的情况下，输出结果会自动分行并标注行的序号，在没规定的情况下则`[1]`满了就输出到的`[2]`，`[2]`满了就输出到的`[3]`，以此类推。
:::



R是你与计算机之间的可靠翻译。
这位翻译十分忠诚，它会不打折扣地让计算机执行你的命令；这位翻译也很古板，你哪怕说错、说漏一个字母，它会不知所措，直到你把命令修改到它听懂为止。
学习R语言，就是在学如何用R听得懂的话同它交流，让它把你脑海里的计划变成现实。
你熟练在地掌握这门"外语"后，你会更加认识到R的强大能力，也会惊叹于同你朝夕相处的计算机还能如此帮助你的工作！
初学R语言必然有一些不适应，仿佛在用蹩脚的英语同机器聊天。但当你运用R语言写出并运行了第一条代码时，你就已经完成了学习R语言中最重要的一步，那就是开始使用它。首先，我们先一起科普几个基本概念，让你知道R语言是什么，R语言能为你做什么。

## R语言

R语言是我们与R的沟通用语，是我们的学习的重点内容，这套语言只有我们和R掌握。实际上，R还会与计算机沟通的另一套语言，它将会把R语言转化为计算机能听懂的语言，让计算机听懂并执行我们的命令。


:::{.callout-note}

### R语言与RStudio

R-studio是与R语言最常用的集成开发环境（IDE），你能通过官方网站https://www.rstudio.com获得它。众所周知，R是一位古板的翻译，它需要像R-studio这样的助手让你和R的沟通更加顺畅，也能帮助管理你和R正在进行的工作。在实际操作中，R-studio像是一个浏览器，我们与R的沟通在其搭建的平台上进行，我们录入命令和收到反馈也往往通过类似R-studio的软件进行。
如果将R语言编程比喻为驾驶汽车的话，R和R语言组合在一起才是一辆功能完整的汽车。R语言就像是汽车的发动机，是一辆汽车最核心的部件，但光靠一台发动机不足以满足畅快的“驾驶”体验。RStudio就如同一辆汽车的车体，为编程这个“驾驶”技术提供了完整的操作功能，能够更好地让R语言的马力助力于我们的研究和工作。在开始正式的R语言实战之前，希望你能完成R和RStudio最新版本的安装，我们的后续教学将是以RStudio为IDE进行。

:::


## 知识点

- 研究问题：
   **我们要对不平等认知对社会政治行为影响进行研究，那WVS7（7th World Value Survey）能给我们什么有用的相关信息呢？**
   WVS7是著名政治学家罗纳德·英格尔哈特（Ronald Inglehart）设计的世界价值观调查，其数据经过匿名处理后逐渐公开。我们将WVS7的部分样本数据作为以下诸多章节的实验数据来使用。在本节里，我们希望能通过数据探讨如下问题：
   
   - 一个人的家庭经济状况会影响其受教育程度吗？
   - 不同国家的公民对于政府信任的水平如何？
   - 不平等认知会对人的社会政治行为产生影响吗？  
  
  好在，WVS7已经是结构化的数据，这也就意味着我们不需要经过太多的数据清理（data wrangle）就能直接使用，但我们也要了解R语言识别、处理数据的基本逻辑，才能真正将数据化为己用。

:::{.callout-tip}
  任何的数据分析，都离不开数据的输入、处理、操作三个阶段。我们将在本章节里演示最基础、最简单的数据分析流程，带你进入基于R语言的数据分析大门！以下是本章节的主要教学内容。
       
- 基础概念
- 数据输入
- 数据种类
- 数据属性
- 数据输出
:::

## 基础概念

### R是面对对象的编程语言

面向对象编程（Object-orientedProgramming）是开发者设计R所使用的计算机编程架构，这类语言的基本操作单位是类（class）和对象（object）。其中，类是概括性的，规定了其所属对象的属性类型，是其所辖对象的模板，比如在国家这一类下，所有个体都包含人口、疆域、政权类型等属性。对象是类模板的一个具象，比如基于国家类可以创建的对象中国、法国、爱尔兰等。R一般要面对数量庞大、各有不同的对象（object），往往要将具有相同或相似属性的对象集合成类（class），再分别依据需要予以处理，这是R能够为你高效工作的“处世哲学”。
为了更好地理解R的思考方式，不妨来看一看下面这个小故事。例如，如果有一个收拾房间的任务，你可能会用如下流程完成：
a.将脏上衣放进洗衣机；
b.将脏外裤放进洗衣机；
c.将编程书放进书柜；
d.将数学书放进书柜；
e.将笔放进笔筒；
f.将橡皮擦放进笔筒。
这是一种类似于面向过程编程（Procedure-orientedProgramming）的解决方案，如果交给一个程序做类似的事情，它可能这一次能顺利完成了收拾房间的任务。但如果下一次收拾房间时没有需要放入书柜的编程书，它就会卡在环节c不知所措，需要你重新为这次收拾房间编写程序。

因此，对于R更喜欢的方式是：
A．将脏上衣、脏外裤归类为脏衣物；将编程书、数学书归类为书；将笔、橡皮擦归类为文具。
B．将脏衣物放进洗衣机；将书放进书柜；将文具放入笔筒。

这种类似于面向对象编程的解决方案将会给予你很大的便利，你只用告诉R房间里的物品分别属于脏衣物、书和文具，每当你要R执行收拾房间的命令时，它就会自主地按照各个物品的分类完成任务，而不需要你每一次都为R精心定制独一无二的工作计划。相信这种轻松、灵活的对话方式能让你更好地与R沟通。
其中，放进洗衣机、放进书柜、放进笔筒的动作也需要通过R语言表达，我们往往通过命令（function）来实现这些动作。

:::{.callout-note}
在这里，我们总结一下小故事里提到的要点。

- **类(Classes)**: 使用者可自定义的*对象*结构及其特征和*方法*。
- **对象(Objects)**: 特定类别的具体实例，如“中国”之于“国家”，“R”之于“字母”。这些实例均具备其所属类的*属性*。
- **方法(Methods)**: 在类内定义的一些命令，这些命令可以用来表现该类对象的一些特征行为，比如人会吃喝拉撒睡，那么这“吃喝拉撒睡”就是人的“方法”。
- **属性(Properties)**: 用于描述某对象的一些方面，比如发色、肤色、身高、体重之于一个人。这些属性是同一类中所有对象都具备的，但具体取值可能各有不同。可以将属性想象成这个对象的“参数”。
:::

### 命令（function）是实现R操作的基本语法

使用“function”一词来代表“命令”，就有浓郁的统计学色彩（不难猜测，R语言的开发团队主要由统计学家构成）。相较于翻译成“函数”，把function翻译成“命令”会更加贴合其本意，因为function表达了处理数据的方式。

命令在R语言起到的作用是告诉R面对不同类型的对象，应该用何种方法去处理，使得输入的对象成为你想要的输出结果。例如在上个例子中，属于脏衣物的脏上衣是输入对象，将其放入洗衣机就是处理脏衣物的命令，已经放进洗衣机的脏衬衫便是输出的结果。可以说，R语言的语法就是对象与命令的组合，**R语言 = 对象 + 命令**，基本格式为：

<结果数据> <- <命令名>(<目标数据>, <条件1>, <条件2>, ...)

假如，你希望R语言帮你洗衣服，那么你应该跟R说：

<干净衣服> <- <清洗>(<脏衣服>,<添加洗衣液>,<添加柔顺剂>,<清洗后烘干>),R语言就能明白你要表达的意思了！
其中，“<-”是常用的赋值符号，在这里，你可以先简单得把它理解为“是”的意思，下文将会详细讲解。

但是，<清洗>这个命令又是从哪里来的呢？或者换句话说，应该让从来没有洗过衣服的R，如何学会“清洗”这个动作呢？在R语言中已经内置了一系列处理对象的基础命令，基础命令以外的命令在某种意义上都是基础命令的组合。
例如，我们想用R语言描述光线传过手指、在地面留下阴影的过程。当光线穿过手指时，投射在墙上的阴影往往比真实的手指长度要更长，正如下图。

![](images/handShadow.gif){height=500}

R语言不懂什么是光线，那么我们可以通过基础命令的组合来实现光线留下阴影的效果。首先，我们创造一个新的命令，用"light"来命名：

```{r funIllustration, eval = FALSE}
light <- function(finger){
  {{shadow <- finger + 5}}
}
handShadow <- light(finger = 3)
handShadow
```

如果将手的形状作为输入对象，将影子比为输出对象，那将手的形状处理成影子形状的那束光便行使了命令的功能。通过命令“light”，我们只要输入手指长度（finger），就能知道对应的阴影长度，并将其命名为“handShadow”。R可处理的对象十分丰富，一组数据、一串文字、一张图片......都能成为对象。


:::{.callout-note}
###命令的特性

- **封装性(Encapsulation)**: 
“封装”是一个很形象的描述，就是把一系列的命令打包成一个命令组合，当你设置好并发出“清洗”的命令时，R语言就会按照流程完成对脏衣服的加水、加洗衣液、加柔顺剂、揉搓、烘干等步骤，不用再把这一系列基础命令再描述一遍,function()就是一个常用的封装函数的命令。值得提醒的是，**不要覆盖、更改、删除R语言自带的基础命令，这可能会造成很多意向不到的运行错误**。

- **多态性(Polymorphism)**: 一个命令可以对不同对象进行不同的处理。最典型的例子是`summary()`

```{r polymorphism, exercise=TRUE}
summary(wvs7)
summary(wvs7$age)
```

summary()可以识别一个数据框内各变量的数据类型，并以此给出有针对的描述性统计。
:::

### 现学现练

R语言的多态处理让我们能够用通用方法或函数来处理那些尚未定义的对象类型，除`summary()`外，`plot()`是另外一个多态处理的例子。请使用`plot()`对两种不同的对象进行处理，看看结果如何。

```{r polymorphism_exercise, exercise=TRUE}
plot(wvs7$age)
plot(wvs7$age, wvs7$incomeLevel)
```

:::{.callout-note}
- **继承性(Inheritance)**: 所谓继承就是指对于同一个父类的所有子类都自动具备了父类的特征。做个类比，当你设置的父类“马”明确了具有4条腿的属性，那基于“马”衍生的子类“黑马”、“白马”、“小马”、“老马”等都会继承4条腿的属性。

- **安全性(Safty)**: 命令作用于对象时，会对对象的类进行判断，如果不是命令定义范围内能处理的对象，则会停止运行，给出错误提示，换句话说，就是“出bug”了。只有解决了运行错误，才能完整地将命令执行下去，完成你想要R语言完成的工作。
:::


### R语言的操作守则。

:::{.callout-tip}
*不直接触碰数据*数据是R语言等一系列面向对象编程的编程语言的行为守则，甚至是一种操作“信仰”。通过“对象+命令”的方式来完成数据处理，对于日常使用Excel等数据软件的初学者而言是一个从陌生到熟悉的适应过程，这些“繁琐”的操作可能会让你一度想要重新打开Excel，轻点几下鼠标就完成R语言里用多行代码才能完成的操作（有时还需要修复运行错误）。
:::

如果仅仅是几处简单的操作，可能还没有暴露问题。但在研究实际中，我们要处理的数据往往很复杂，也常需要较为复杂的数据清洗才能成为可以直接使用的结构化数据。假设我们使用Excel来完成这项工作，那可能要点击几百、上千次鼠标才能完成操作，如果其中有一步出现了操作失误，就会导致后续分析使用的是错误数据，这将会带来极大的研究隐患。毕竟，谁都不希望自己辛辛苦苦发表的研究成果会因为数据错误而被撤稿，乃至影响自己的学术声誉。
通过R语言或者其他编程语言处理数据的优势在于每一步操作都是可回溯的，极大地提高了数据处理的安全性。数据处理的代码如同命令的备忘录，既方便自查是否存在步骤错误，也方便与合作者同步工作，让涉及数据处理的每一个操作都有迹可循。


### 数据包

数据包（package）是封装好的R语言命令及相关数据、文档。如果把R和RStudio比喻为操作系统，那么数据包就像是应用程序。当我们要实现一个复杂的操作时，往往已有人早就有相关的需求，并开发出了能够实现该功能的数据包。
R语言的开发者们已经共同构建了一个十分活跃的社区，在网络里免费公布了海量数据包，极大延展了R语言的功能，使得R语言能便捷地实现其他编程语言所具有的绝大多数功能。

:::{.callout-tip}
C-RAN是一个无线接入网构架，不少数据包储存于此，你可以通过`r nrow(available.packages())`来查询C-RAN上已有的数据包总数。此外，还有很多数据包在Github等代码托管平台上公布、更新，这些平台也是检索、下载数据包的重要渠道。
:::

### drhur包

drhur包是清华大学政治学系副教授胡悦老师主持设计的R语言互动式教学数据包。我们将尽可能通过生动形象的语言、丰富有趣的案例打造一个“新手友好型”学习平台。即使你是一位没有编程语言基础的“小白”，也能通过drhur包的系列教学章节渐入佳境，逐渐从R Survivor向R Expert进阶，让强大的R语言助力你的学习、研究、工作。

:::{.callout-tip}
你可以通过`install.packages("drhur")`来安装drhur包的正式版本。在drhur包处于开发状态时，`devtools::install_github("sammo3182/drhur")`能够帮你安装最新版本的drhur包，方便你第一时间“追番”R语言最新实战技巧！
同时，胡悦老师还开发了interplot、dotwhisper、pewdata、regioncode、drhutools等数据包，涵盖数据处理、中国区域数据等内容，欢迎下载探索和提供反馈！

![](images/hives_horizontal.png){height=300}
:::

## 基础语法



### 赋值


:::{.callout-tip}
`<-`是最常用的赋值符，是`assign()`命令默认行为的简写。赋值的基础语法是：

> <名称> `<-` <对象>
:::

在这里，我们通过赋值符给一个输出的对象取了名字，并将其缓存以备调用。当你输入所取的名称时，R语言就能调取所对应的对象以供使用。例如，我们将1到5的整数命名为`aValidObject`。当我们再次输入`aValidObject`时，R就会将1-5的整数打印出来。

```{r object}
aValidObject <- 1:5
aValidObject
```

:::{.callout-note}
### `<-`的由来

`<-`实际上是一个“象形文字”。上世纪六十年代，一种名为APL（A Programming Language）的数据表记法逐渐发展成为一种表达能力很强的编程语言，推动了R等一批编程语言的诞生。APL含有很多特殊字符，为了能够畅快地输入APL，一种包含APL特殊字符的键盘一度十分流行，`<-`来源于该键盘布局右上角的左箭头。随着APL语言逐渐落寞，相应的键盘布局也不再常用，但用左箭头赋值的习惯被开发者们保留下来，并以`<-`做替代。

![](images/APLkeyBoard.png)
作为常用命令，R为PC`<-`设置了快捷键，在Windows环境中是`Alt + -`，在Mac环境中则是 `option + -`。
:::

### 几种赋值方式的对比

在R中，除了`<-`和`assign()`赋值，还可以通过`->`、`<<-`、`=`来实现类似的功能。但不同赋值符号所实现的功能略有不同。

`<-`和`->`具有明确的方向性。箭头所指的一方就是被赋值的名称，例如：
```{r arrow}
a <- 12
25 -> b
```

相比于`->`，还是`<-`更适应大多数人的书写、阅读习惯。一般而言，我们更推荐你使用`->`。


`<-`和`=`的主要区别在于是否会创造对象。例如，当你使用`<-`把`y`赋值为1到10的平均数，当你输入`y`时，系统会把计算结果再次输出。但如果是用`=`同样将1到10的平均数赋值给`x`，当你再次输入`x`，系统会向你反馈“查无此人”。也就是说，`=`的赋值仅在该行代码有效，不会被系统记录，如果你不想创造对象而赋值，`=`会是更佳选择，这在我们设置命令参数等情景中会经常用到这一特性。

```{r sideEffect, exercise = TRUE}
median(y <- 1:10); y
median(x = 1:10); x
```

- `<<-`: 援引父级变量

`<-`只能在当前环境层赋值，但`<<-`在更高的环境层赋值，`<<-`也因此会被称为全局赋值。例如，我们创建了一个函数，在其中给`i`使用`<-`赋值为0，但这个赋值仅在该函数内有效。通过`<<-`赋值的`i`才能在该函数外的环境里得到调用，即假设你不打开该函数所属的数据包，你依然可以调用`<<-`赋值的`i`。

```{r}
new_counter <- function() {
  i <- 0
  function() {
    # do something useful, then ...
    i <<- i + 1
    i
  }
}
```

### 赋值规则

:::{.callout-warning}
赋值有如下禁忌，如果违反会出现系统报错乃至破坏R语言本身：

1. 不以数字开头 (错误示例: `1stday`)
2. 除了 `.` 和 `_`以外，没有其他特殊符号(错误示例: `M&M`)
3. 区分大小写 (`X != x`) `!`表示“非”/“否”，`!=`表示“不等于”
4. 如需必要请勿重写内置命令 (避免: `list <- c(1:5)`)

请创建一个合规和不合规的对象：

```{r objectEg, exercise = TRUE}

# 创建一个不合规的对象

# 5var_name <- data_frame($education)


# 一个合规对象

var_name5 <- data_frame(wvs7$education)

```
:::

### 现学现练

```{r vname, echo=FALSE}
question("请选择所有合规的变量名？",
  answer("my_data_frame <- data_frame(wvs7$education)", correct = TRUE),
  answer("mydata&frame <- data_frame(wvs7$education)"),
  answer("MyDataFrame <- data_frame(wvs7$education)", correct = TRUE),
  answer("1data_frame <- data_frame(wvs7$education)"),
  incorrect = "Incorrect")
```

:::{.callout-note}
还有一点经验之谈，那就是尽可能遵循“表意命名”原则，即通过名称直观反映数据信息。例如，你要命名某国的国内生产总值、国民生产总值、国民收入总值等变量，将其命名为`GDP`、`GNP`、`GNI`会清晰明了地知道这个名称所对应的对象所描述的数据是什么。但如果使用`Index1`、`Index2`、`Index3`在处理数据时就容易将不同变量混淆，增加了数据处理错误的风险。
:::

## 数据输入

数据输入是处理数据的第一环节。在这里，我们将学习如何将数据输入系统，为接下来的数据分析作准备。

### 内置数据

R语言内置了不少数据可供使用者测试代码或者演示教学,通过`data()`函数可以查阅内置函数清单。

```{r mtcars, exercise = TRUE}
data()
```

之后就可以通过对应名称直接调用内置数据啦！

### 现学现练

在`data`里选择一个数据打开并通过summary检查其中的变量：

```{r mtcars_exercise, exercise=TRUE}


```

```{r mtcars_exercise-solution}
# 举例

data(uspop)
summary(uspop)
```

### 可直读数据

储存数据有不同文件，有些数据格式可以直接读取调用，分别为：

- `.RDS`
- `.RData` 
- `.txt` 
- `.csv`

:::{.callout-tip}
`.RDS`、`.RData` 是R语言的数据格式，前者只能储存单一对象，后者可以储存多个对象。读取数据的格式为：

> 语法： <名称>`<-` <读取命令>(<数据路径>)

常用的读取命令为`readRDS`、`read.table`、`read.csv`，按照语法可以写为：

```{r input, eval = FALSE}
df_rds <- readRDS("aDataset.rds")
df_txt <- read.table("D:/aDataset.txt")
df_csv <- read.csv("./aDataset.csv")
```
:::

### 调用包读取数据

对于不能直接读取的数据，我们就需要调用对应的数据包来转换格式，使其能够被R语言读取。常用的数据包有`haven``、readr`、`readxl`、`rjson`、`xmml`等，我们先通过`library`或者`require`调用数据包，然后使用其中的命令。

```{r eval=FALSE}
# SPSS, Stata, SAS
library(haven)
df_spss <- read_spss("<FileName>.sav")
df_stata <- read_dta("<FileName>.dta")
df_sas <- read_sas("<FileName>.sas7bdat")  

# 表格的快速导入
library（reader）
df_csv <- read.csv("<FileName>.csv")
df_table <- read.table("<FileName>.csv/txt")

# Excel表格
library(readxl)
df_excel <- read_excel("<FileName>.xls")
df_excel2 <- read_excel("<FileName>.xlsx")

# JSON (JavaScript Object Notation)
library(rjson)
df_json <- fromJSON(file = "<FileName>.json" )

# XML/Html
library(xml)
df_xml <- xmlTreeParse("<url>")
df_html <- readHTMLTable(url, which=3)
```

:::{.callout-note}
此外，十分推荐使用数据读取界的”瑞士军刀“——`rio`。`rio`的强大之处在于可以自动识别数据文件的格式并读取，适用于绝大多数数据格式，无需再依据数据格式匹配相应的数据包内的读取命令。

```{r eval = FALSE}
library(rio)
df_anything <- import(<AnyTypeOfData>)
```
:::

### 数据种类

1. 向量 (vector) 
2. 矩阵 (matrix) 
3. 数据框 (data frame)
4. 列表 (list)
5. 阵列 (array)

接下来，我们将解析常用数据结构的使用方式。

### 向量

向量表示一类具有排列顺序的值。我们可以通过执行组合功能的命令`c()`可用来创建向量，不同数据类型的向量在输入形式上略有不同。单个向量中的数据必须拥有相同的类型（数值型、字符型或逻辑型）。

:::{.callout-tip}
- 数字向量（numeric vector）

顾名思义，数字向量是具有数学意义的变量，即变量值可以进行代数运算。
数字向量的格式为`c(<数字1>, <数字2>,...,<数字n>)`。

```{r numeric, exercise = TRUE}
vec_integer <- c(1, -2, NA)
vec_double <- c(1.5, -2.34, 1/3)
vec_1_100 <- c(1:100)
```
:::

其中，`NA`表示的是“not available”，也就是空缺值，是R语言中常用的表达方式。
生成数字向量不一定要注意输入，例如上例中`c(1:100)`表示了一个从1到100的自然数组成的向量，不少具有数学规律的向量也可以用类似的方式自动生成。

### 现学现练

生成一个包含1-100中全部偶数的向量：

```{r numeric_exercise, exercise=TRUE}
# hint: help(seq)

```


```{r numeric_exercise-solution}
x <- seq(2,100,by=2)

```

###

:::{.callout-tip}
- 字符向量（character vector）

字符向量以字符形式储存各个值。R语言只能读懂数字和命令，不能理解字符值的实际意义，所以要在字符值外使用引号来作标注，告诉R语言不必以命令或数字的逻辑来读懂这串字符，只需忠实地记录即可。
相反地，如果不添加引号，R语言就会认为这是需要它读懂的指令或参数，在运行时会报错或产生歧义。

```{r character, exercise = TRUE}
vec_chr <- c("牛", "^_^", "R is hard，but I can nail it.")
```
:::

当然，一些常用的具有规律的特定字符也可以调用相应的命令来实现，例如按照顺序生成英文字母的字符向量。

### 现学现练

生成一个a-z的字母序列：

```{r character_exercise, exercise=TRUE}
vec_letters <- c("a", "b", "c", "d", "e")
```

```{r character_exercise-solution}
letters[1:26]

```


###

:::{.callout-tip}
- 逻辑向量（logic vector）

逻辑向量是一种二元变量，表示“真”或“假”，在形式上可以采取`TRUE/FALSE`、`T/F`、`1/0`来标记。照此形式记录的数字向量、字符向量也可以转变数据形式为逻辑向量。
逻辑向量不仅可以用于表示变量信息，也广泛应用于R代码的参数。

```{r logic, exercise = TRUE}
vec_tf <- c(TRUE, TRUE, FALSE)
vec_tf
# c(TRUE, TRUE, FALSE) == c(1, 1, 0)
```
:::

### 现学现练

假设x为包含(1,1,0)的向量，将它转化为逻辑向量：

```{r logic_exercise, exercise=TRUE}

```

```{r logic_exercise-solution}
x <- c(1, 1, 0)
x <- as.logical(x)
```

###

:::{.callout-tip}
- 类别向量（factor vector）

类别向量能够分门别类地储存向量中的值，将相同的值归位同一个类别，可进一步细分为不定序变量（也就是默认的类别变量形式）和定序变量。不同的类被称为水平（level），每一类可以赋予对应的名称，这些名称被称为标签（label）。

    - 定序变量 (ordinal vector)

定序变量是在类别变量的基础上对不同的类进行排序。如果要生成不定序变量，就使用`factor()`命令，如果要生成定序变量则使用`ordered()`命令，`levels`参数中输入的顺序即是不同水平的排列顺序。

```{r factor, exercise = TRUE}
vec_fac <- factor(c(1, 2, 2, 3))
```

```{r factor-hint}
vec_ord <- ordered(c(1, 2, 2, 3))
vec_fac2 <- factor(c(1, 2, 2, 3), 
                   levels = c(3, 2, 1), 
                   labels = c("Apple", "Pear", "Orange"))
```
:::

### 现学现练

在拿到一个数据集后，先要对数据有个大致的了解。

先查看wvs7数据里的变量分别是什么类型：

```{r factor_exercise1, exercise=TRUE}



```

```{r factor_exercise1-solution}

str(wvs7)

```

查看数据集里incomeLevel这个变量的性质：

```{r factor_exercise2, exercise=TRUE}



```

```{r factor_exercise2-solution}

class(wvs7$incomeLevel)

```

查看incomeLevel的取值和每个取值的频次情况：
  
```{r factor_exercise3, exercise=TRUE}



```

```{r factor_exercise3-solution}

table(wvs7$incomeLevel)

```


###
:::{.callout-tip}
- 时间向量（POSIXct/POSIXlt vector）

时间向量能以特定格式储存时间数据，并灵活地以不同形式表达、输出，将通过多种命令来实现这类功能。

    - `as.POSIXct` (numeric input)以数字格式储存时间数据。
    - `as.POSIXlt` (character input)以字符形式储存时间数据。

其中，POSIXct用某个时间到UNIX元年（1970-01-01 00:00:00）所经过的秒数来记录时间，即通过计数的方式表示时间（count time）；而POSIXlt用列表方式表示时间（list time），时间的每一部分都是列表的一个元素。

```{r time_POSIXct_POSIXlt}
#`as.POSIXct`与`as.POSIXlt`的区别
ct <- as.POSIXct("2023-03-20 10:11:12")
lt <- as.POSIXlt("2023-03-20 10:11:12")



```

```{r time_POSIXctandPOSIXlt}
unlist(ct)
unlist(lt)
```
:::

通过特定命令，R语言可以读取本地计算机记录的当前时间。

```{r time, exercise = TRUE}
Sys.time() # 获取当前时间
today()   # 获取当日的 年月日
now()  # 获取当日的 年月日 时分秒  时区
# CST为操作时电脑ip所在的时区

# The full pack
time1 <- Sys.time()
time2 <- as.POSIXlt(Sys.time())
time2$wday # week of the day

## 如果我只在乎日期呢？
```

```{r time-hint}
Sys.Date()
date1 <- as.Date("2019-01-02")
class(date1)  # 查看数据类型
```

###

时间数据的处理也有“瑞士军刀”——`lubridate`。通过`lubridate`可以灵活地转换时间格式，例如调整年、月、日的排列顺序和将同一时间转变为不同时区的对应时间等。

```{r date, exercise = TRUE}
library(lubridate)

ymd("20221016")
mdy("10-16-2022")
dmy("16/10/2022")
ymd_hms("2022-10-16 09:00:00", tz = "Etc/GMT+8")
```

```{r date-hint}
OlsonNames()
```

### 现学现练

当面对顺序不一样的向量时，如:
```
x=c("20190101",'01012019','021901')
```
应该怎么识别时间呢？

```{r date_exercise, exercise=TRUE}
#help(parse_date_time)

```

```{r date_exercise-solution}
parse_date_time(x,orders = c("ymd","dmy","dym"))
```

在这里，我们为`parse_date_time()`提供了多种读取数据的方式，使得其能够同时读取多种时间格式。

### 矩阵

矩阵（matrix）是同一类型数据按照行、列组成的数据。见`drhur("algebra")`。

### 阵列

阵列(array): 顾名思义就是列的“阵”，可用于记录二维以上的数据，各维度各保存一个向量，可通过`array`命令创建。

```{r array}
# 创建两个长度不同的向量。
vector1 <- c(5, 9, 3)
vector2 <- c(10, 11, 12, 13, 14, 15)

# 把这些向量输入到数组中。
result <- array(c(vector1, vector2), dim = c(3, 3, 2))
result
```

### 列表

列表（list）: 列表可以由任意格式的多种数据组合而成，不少命令（例如`summary()`）返回的结果是以列表的形式表达。

```{r list}
ls_monks <- list(name = c("Wukong Sun", "Sanzang Tang", "Wuneng Zhu", "Wujing Sha"),
                 power = c(100, 20, 90, 40),
                 buddha = c(TRUE, TRUE, FALSE, FALSE))

ls_monks
```

### 数据框

数据框（Data Frame）是一种特殊的列/矩阵，类似于等长的“变量”的集合。数据框中，所有的列长度都相等，每行可以看作是一个样本的各个观测值。
以数据框形式处理数据是多种软件的常用界面。
例如，在Excel的界面就与数据框很相似:

![](images/excel-r1.png)

如果直接在R中生成数据框，看上去还比较陌生:

```{r dataframe}
df_toy <- data.frame(female = c(0,1,1,0),
           age = c(29, 39, 38, 12),
           name = c("Iron Man", "Black Widow", "Captain Marvel", "Captain America"))

df_toy
```

但在Rstudio中打开数据框，看上去就于Excel有类似的界面了:

![](images/excel-r2.png)

## 数据属性

:::{.callout-note}
当我们成功输入数据后，我们就可以通过一些常用命令来获取一些关于数据的基本信息。

1. `class()`, `typeof()`:查询变量属性；
2. `nchars()`:获取字符串的长度；
3. `levels()`:获取或设置因子的水平；
4. `nrow()`:返回指定矩阵的行数；
5. `ncol()`:用于返回指定矩阵的列数；
6. `dim()`:列向量张成的子空间，即维度（也可以简理解为返回行数和列数）。
:::

下面，是这些命令的示例：

```{r attribute, exercise = TRUE}
vec_integer <- c(1, -2, NA)

vec_double <- c(1.5, -2.34, 1/3)

vec_chr <- c("牛", "^_^", "R is hard，but I can nail it.")

vec_fac <- factor(c(1, 2, 2, 3))

ls_monks <- list(name = c("Wukong Sun", "Sanzang Tang", "Wuneng Zhu", "Wujing Sha"),
                 power = c(100, 20, 90, 40),
                 buddha = c(TRUE, TRUE, FALSE, FALSE))

df_toy <- data.frame(female = c(0,1,1,0),
           age = c(29, 39, 38, 12),
           name = c("Iron Man", "Black Widow", "Captain Marvel", "Captain America"))

class(vec_double)
typeof(vec_integer)

nchar(vec_chr)
levels(vec_fac)

length(vec_double)
length(ls_monks)
length(df_toy)

nrow(df_toy)
ncol(df_toy)
dim(df_toy)
```

### 现学现练

将下面的向量转化为numeric类型:  
```
c(FALSE, TRUE)
```

```{r attribute_exercise1, exercise=TRUE}
# help(as.numeric)

```


```{r attribute_exercise1-solution}
as.numeric(c(FALSE, TRUE))

```


wvs7里的性别变量“female"的数值是“TRUE”、“FALSE”  
在具体分析的时候，字符型变量不便操作，可以把它转换为数值型的0 1变量。

```{r attribute_exercise2, exercise=TRUE}

```


```{r attribute_exercise2-solution}

as.numeric(wvs7$female) - 1

```


## 数据输出

:::{.callout-tip}
当我们处理完数据后，数据还缓存在R中，需要输出成为数据文件才方便长期储存调用。数据输出的语法和数据输入的语法相类似：

> 语法：<命令>(<待存数据>，file = <存储路径>)

:::

接下来就要看需要把数据储存为何种格式、路径。

### 储存为R数据

如果要储存为R数据文件，可以分为两种形式。如前文所言，既可以储存为单一对象的RDS文件，也可以将多个对象储存进入同一个Rdata文件里。

```{r saving, eval = FALSE}
saveRDS(df_toy, file = "df_toy.rds")
save(df_toy, ls_monks, file = "test.rdata")
```

### 储存为csv文件

如果要储存为csv文件，则需要调用`write.csv()`命令来实现。

```{r savingCSV, eval = FALSE}
write.csv(df_toy, file = "toy.csv")
```

> 提示: 如果你的数据是中文的，可能会出现存储csv乱码现象。

### 通过rio储存数据

当然了，你可以通过专门软件包或“瑞士军刀”（`rio::export`）把数据以STATA, SPSS, SAS Excel, JSON, Matlab, HTML等格式存储下来, 不过你真的想这样吗？

以下是储存不同格式的数据所用的时间对比。可以十分直观地看到，储存为R格式文件的速度要快得多。其原因也很好理解：如果要将R内缓存的数据储存为非R自带格式的文件，实际上都要经过多次编译才能实现，这也会提高R储存数据的运算量，自然速度不能比直接储存为R格式文件要快。

STATA (.dta, \<14): 3.16 G = R (.rds): 0.05 G

| **Method**       | **Average Time** | **Minimum** | **Maximum** |
|:-----------------|:----------------:|:-----------:|:-----------:|
| base::readRDS    |       19.65      |    18.64    |    21.01    |
| fst::read\_fst   |       1.39       |     0.56    |     3.41    |
| haven::read\_sav |      104.78      |    101.00   |    111.85   |
| qs::qread        |       3.33       |     3.00    |     4.24    |

: 四种在R中读取GSS数据的方式所用的平均时间（以秒计）

| **Method**      | **Average Time** | **Minimum** | **Maximum** | **File Size** |
|:----------------|:----------------:|:-----------:|:-----------:|:-------------:|
| base::saveRDS   |       98.36      |    93.09    |    103.24   |    30.9 MB    |
| fst::write\_fst |       2.70       |     1.86    |     4.05    |    122.1 MB   |
| qs::qsave       |       5.03       |     4.35    |     6.62    |    44.6 MB    |

: 在R中写入GSS数据（及文件大小）所用的平均时间

如果你与合作者都是使用R语言，储存为R格式文件将会更加便捷，这也方便之后再输入数据。

## 总结

以上就是R语言的基础概念介绍和处理数据的基础流程及操作。如果你是一位之前没有接触的R语言的“小白”，那当你看到这里时，恭喜你已经完整地进行了一次R语言数据处理的最小化流程！接下来，我们将逐步进阶，带你领略R语言的广阔世界。

以下是本讲的重要知识点回顾。

- 基础概念
    - OOP
    - 命令
    - 数据包
    - 赋值
- 数据输入
    - 内置/cvs
    - 数据包辅助
- 数据种类
    - 向量
    - 矩阵
    - 阵列
    - 列表
    - 数据框
- 数据属性
- 数据输出
    - 储存为R数据
    - 储存为其他数据类型

