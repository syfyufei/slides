---
title: "R语言小史与编程选择"
subtitle: "History of R"
---

# R语言小史与编程选择 {#sec-history}

## 导言

了解R语言的前世今生及相关的编程语言知识是本章的主要内容。
如果你已拥有丰富的编程经验，或许这一章节的内容仅仅是一个“消遣读物”。
但如果R语言是你入门编程的第一语言，相信本章的内容能够让你更好理解R语言的操作逻辑，在未来工作中更好开发R语言的强大功能。
在本章节中，我们会介绍：

- R语言的“史前史”，R语言是如何在编程语言发展中诞生的。
- R语言的“发展史”，R语言的强大功能是如何在基础版本上不断延伸扩展出来的。
- 选择R语言的理由。

## R语言的“史前史”：编程语言的发展

当我们在讨论编程语言，我们究竟在讨论什么？
理解什么是编程语言，才能更好理解作为编程语言的R。
编程语言是一种用于表达计算的形式语言，通过设定和输出指令控制计算机的行为和处理数据。
自然语言是人与人之间沟通的语言，编程语言则是人与计算机沟通的语言。
编程语言具有语法、语义等构成一门语言的基础要素，软件或脚本就是开发者通过编程语撰写的“工作方案”，使得计算机读懂开发者的目的来实现来精准执行开发者发出的命令。

在编程语言出现之前，与计算机交流是个大难题。
世界上第一台计算机——阿塔纳索夫-贝瑞计算机（Atanasoff–Berry、 Computer）还不具备编程功能，需要通过控制开关来实现各种功功能，数据输入则通过纸质打孔卡来完成，这种打孔卡通过孔洞的分布来表达数据信息。
随后诞生的ENIAC计算机（Electronic Numerical Integrator And Computer）是世界上第一台通用计算机，虽然数据输入输出仍然依靠卡片，但划时代地具备了编程能力。
但其编程的方式十分笨重复杂，需要先把要实现的计算过程设计好后，再通过操作各种开关、电线来实现功能，一次编程可能就要花费几天的时间，这个过程不仅耗费智力，也很消耗体力，因为ENIAC重达27吨，如同一栋小楼。
如果能像对话一样同计算机交流，是不是就会很省事？
在计算机硬件进步的同时，科学家们也着手开发于与计算机交流的语言，编程语言因此诞生了

上世纪40-50年年代的计算机编程直接使用机器语言，这种语言完全由一系列的二进制代码组成，对应计算机的基本操作。
机器语言并不是一门通用语言，每款计算机有自己的“方言”，这使得早期的开发者需要对每一款计算机的硬件具备充足的了解，才能像机械工一样进行编程。
但凡手动计算过二进制就会知道，当面对海量的“0”和“1”时，这件工作将会是多么复杂。
为了简化机器语言编程，汇编语言被发明出来。它使用简短的代码（助记符）代替二进制指令，通过汇编器转换成机器语言。虽然汇编语言依然与特定硬件紧密相关，但提高了编程效率。
虽然如此，但汇编语言的“用户体验”依然不佳，程序员们还在等待更好用的编程语言出现。
进入上世纪50年代后，FORTRAN作为第一个广泛使用的高级编程语言诞生了，主要用于科学计算和工程领域，相类似的适应不同引用场景的高级语言开始出现。
在70年代后，C语言等一批编程范式不同的编程语言问世，R语言的前身——S语言也在这一时期诞生。
以C语言、C++语言为基础，后又诞生了Python、Java等颇具知名度的编程语言。

## R语言的“发展史”：从统计分析到无所不能

R语言的前身是S语言，是由贝尔实验室开发的用于统计运算的编程语言。R语言则是由新西兰奥克兰大学的统计学家乔治·罗斯·伊哈卡（George Ross Ihaka）和罗伯特·克利福德·杰特曼（Robert Clifford Gentleman）共同开发形成。
后来，诸多统计学家加入R语言的开发团队，形成了专门负责R语言开发维护的R核心小组，并为此成立了非营利性的R基金会。
所以你在使用时不难发现，R语言的内置命令几乎涵盖了数据分析的基础功能，因为这里统计学家们已经把R开发成为各项功能应有尽有的“快乐老家”。
R语言同时也是倡导自由软件的GNU计划的项目，这也是我们能够自由免费使用R的原因之一。

R语言在1995年官方首发后，又于1997年成立了CRAN网站（Comprehensive R Archive Network）。1
CRAN除提供R语言的执行文件下载、源代码及帮助文档外，还收录了众多用户贡献的R软件包。
起初，CRAN只有3个数据镜像和12个软件包。
到2022年1月，CRAN的数据镜像增加到101个，软件包数量已经突破20000个。
当你使用`library()`命令时，数据包正是从CRAN中下载安装。
几乎可以认为，只要是你想要实现的数据分析功能，一定能有一个（甚至多个）对应的数据包可以调用。

虽然R语言为统计而生，但众多开发者们也为R点开了其他技能树。
其中最为典型的案例就是`ggplot2`，虽然科研工作者们或许会选择其他编程语言进行科研，但其中相当比例的科研工作者会为了`ggplot2`来学习使用R语言。
在开发者的不懈努力下，R已经可以用来写论文、制作幻灯片（R Markdown/Quarto），用来写书（bookdown）、创建Web应用（shiny）、文本分析（tm/wordcloud）、机器学习（caret/mlr/keras）、空间分析（sp/rqdal/rgeos）甚至制作动画（animation）、游戏开发（RGtk2）。
或许这些功能并非R语言的主要功能，但也反映出R语言本身的多样性和灵活性。
或许我们可以更大胆地说，你能够在R里实现你想在计算机里实现的绝大多数功能，还未能实现的功能或许也已经开发的路上。

##选择R语言的理由

介绍到此，你已经知道了R语言的功能强大、开源免费、社区庞大、迭代及时等这些优势，此后不再赘述。
实际上，这不仅仅是R语言的特点，尤其是功能强大这一优势也是其他主流编程语言所具备的，那为什么我们依然要推荐你把R作为学习编程语言的第一语言，或者是长期坚持使用的编程语言呢？
在这里我们，做一个关于R语言和python的简单比较，让你更清楚R语言与其他同样广受欢迎的编程语言之间的异同。

从设计理念来看，
R语言专门为统计分析、数据挖掘和图形表示设计，强调数据分析和统计模型的构建。
Python是一种通用编程语言，以其简洁明了的语法和易学易用著称，其在web开发、自动化脚本、机器学习、数据科学等多个领域都有应用，强调代码的可读性和通用性。

在数据分析方面，
R语言已有完善的内置命令和海量数据包可供选择。
Python则通过Pandas、NumPy和SciPy等库提供强大的数据分析功能。

在功能延展方面，
R语言拥有一个活跃的社区，专注于统计分析和图形领域，CRAN上有超过12000个包，同时涵盖绝大多数编程开发需求。
Python作为通用编程语言，其社区支持广泛的应用领域，从Web开发到数据科学，PyPI上的库数量庞大，涵盖了各种程序开发的需求。

总而言之，
与Python等通用编程语言相比，R语言提供了更专业的统计分析工具和更精细的数据可视化选项。
此外，CRAN上的海量软件包确保了几乎所有类型的分析需求都能得到满足。
虽然Python在机器学习和Web开发等领域表现出色，但R语言在处理复杂的统计问题和创建高级定制化图表方面仍有其独到之处。
在实际应用中，不少数据科学家和研究者会同时使用R语言和Python，以发挥两者的优势。

从上手难度来看，R语言具有更为平缓的学习曲线。
编程语言发展历程中，有一条规律是编程语言越高级，就越像自然语言，也就是说越像人话。
此处的“高级”并非高低贵贱的高级，而是指其距离机器语言的距离有多远。
一般而言，编程语言越高级，就因为越像自然语言而越容易学习，代价就是计算机要通过更复杂的过程将其转为机器语言而实现命令，这可能会导致更漫长的运算时间。
因此，在处理对象是海量数据的情况下，程序员可能会选择那些没有那么高级的语言编程，这样可以节省很多时间。
这种情况往往在工业领域更加常见，如果你所要分析的数据来源于经济社会领域，数据体量往往不会大到显著影响计算时间的程度，那么不如选择“沟通更顺畅”的R语言来学习和日常使用。
当你度过初学R语言的阵痛期后（这个阵痛期其实也就数周之长），你就会之后的学习进阶就是一个随着日常使用而日渐成长的过程，而不是一个漫漫无期的精进苦修。



